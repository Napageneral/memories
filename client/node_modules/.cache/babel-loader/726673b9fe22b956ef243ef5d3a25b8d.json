{"ast":null,"code":"import { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE, VECTORIZEPOST } from '../constants/actionTypes';\nimport * as api from '../api'; // Action Creators\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPosts();\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const vectorizePost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.vectorizeInput(post);\n    console.log(data);\n    dispatch({\n      type: VECTORIZEPOST,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/tylerbrandt/memories-project/client/src/actions/posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","VECTORIZEPOST","api","getPosts","dispatch","data","fetchPosts","type","payload","error","console","log","message","createPost","post","vectorizePost","vectorizeInput","updatePost","id","deletePost","likePost"],"mappings":"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","sourcesContent":["import { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE, VECTORIZEPOST } from '../constants/actionTypes';\nimport * as api from '../api';\n\n// Action Creators\nexport const getPosts = () => async (dispatch) => {\n        try {\n            const { data } = await api.fetchPosts();\n\n            dispatch({type: FETCH_ALL, payload: data})\n        } catch (error) {\n            console.log(error.message)\n        }\n}\n\nexport const createPost = (post) => async (dispatch) => {\n    try {\n        const {data} = await api.createPost(post);\n        dispatch({type: CREATE, payload: data});\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const vectorizePost = (post) => async (dispatch) => {\n    try {\n        const {data} = await api.vectorizeInput(post);\n        console.log(data)\n        dispatch({type: VECTORIZEPOST, payload: data});\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const updatePost = (id, post) => async (dispatch) => {\n    try {\n        const { data } = await api.updatePost(id, post);\n        dispatch({type: UPDATE, payload: data});\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const deletePost = (id) => async (dispatch) => {\n    try {\n        await api.deletePost(id);\n        dispatch({type: DELETE, payload: id});\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const likePost = (id) => async (dispatch) => {\n    try {\n        const { data } = await api.likePost(id);\n        dispatch({type: LIKE, payload: data});\n    } catch (error) {\n        console.log(error);\n    }\n}"]},"metadata":{},"sourceType":"module"}